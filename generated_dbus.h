/*
 * Generated by gdbus-codegen 2.56.4. DO NOT EDIT.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from.
 */

#ifndef __GENERATED_DBUS_H__
#define __GENERATED_DBUS_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus */

#define TYPE_ORG_FREEDESKTOP_DBUS (org_freedesktop_dbus_get_type ())
#define ORG_FREEDESKTOP_DBUS(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_DBUS, OrgFreedesktopDBus))
#define IS_ORG_FREEDESKTOP_DBUS(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_DBUS))
#define ORG_FREEDESKTOP_DBUS_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_ORG_FREEDESKTOP_DBUS, OrgFreedesktopDBusIface))

struct _OrgFreedesktopDBus;
typedef struct _OrgFreedesktopDBus OrgFreedesktopDBus;
typedef struct _OrgFreedesktopDBusIface OrgFreedesktopDBusIface;

struct _OrgFreedesktopDBusIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_add_match) (
    OrgFreedesktopDBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_get_adt_audit_session_data) (
    OrgFreedesktopDBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_get_connection_app_armor_security_context) (
    OrgFreedesktopDBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_get_connection_credentials) (
    OrgFreedesktopDBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_get_connection_selinux_security_context) (
    OrgFreedesktopDBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_get_connection_unix_process_id) (
    OrgFreedesktopDBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_get_connection_unix_user) (
    OrgFreedesktopDBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_get_id) (
    OrgFreedesktopDBus *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_name_owner) (
    OrgFreedesktopDBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_hello) (
    OrgFreedesktopDBus *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_list_activatable_names) (
    OrgFreedesktopDBus *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_list_names) (
    OrgFreedesktopDBus *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_list_queued_owners) (
    OrgFreedesktopDBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_name_has_owner) (
    OrgFreedesktopDBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_release_name) (
    OrgFreedesktopDBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_reload_config) (
    OrgFreedesktopDBus *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_remove_match) (
    OrgFreedesktopDBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_request_name) (
    OrgFreedesktopDBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0,
    guint arg_unnamed_arg1);

  gboolean (*handle_start_service_by_name) (
    OrgFreedesktopDBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0,
    guint arg_unnamed_arg1);

  gboolean (*handle_update_activation_environment) (
    OrgFreedesktopDBus *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_unnamed_arg0);

  const gchar *const * (*get_features) (OrgFreedesktopDBus *object);

  const gchar *const * (*get_interfaces) (OrgFreedesktopDBus *object);

  void (*name_acquired) (
    OrgFreedesktopDBus *object,
    const gchar *arg_unnamed_arg0);

  void (*name_lost) (
    OrgFreedesktopDBus *object,
    const gchar *arg_unnamed_arg0);

  void (*name_owner_changed) (
    OrgFreedesktopDBus *object,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    const gchar *arg_unnamed_arg2);

};

GType org_freedesktop_dbus_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *org_freedesktop_dbus_interface_info (void);
guint org_freedesktop_dbus_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void org_freedesktop_dbus_complete_hello (
    OrgFreedesktopDBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg0);

void org_freedesktop_dbus_complete_request_name (
    OrgFreedesktopDBus *object,
    GDBusMethodInvocation *invocation,
    guint unnamed_arg2);

void org_freedesktop_dbus_complete_release_name (
    OrgFreedesktopDBus *object,
    GDBusMethodInvocation *invocation,
    guint unnamed_arg1);

void org_freedesktop_dbus_complete_start_service_by_name (
    OrgFreedesktopDBus *object,
    GDBusMethodInvocation *invocation,
    guint unnamed_arg2);

void org_freedesktop_dbus_complete_update_activation_environment (
    OrgFreedesktopDBus *object,
    GDBusMethodInvocation *invocation);

void org_freedesktop_dbus_complete_name_has_owner (
    OrgFreedesktopDBus *object,
    GDBusMethodInvocation *invocation,
    gboolean unnamed_arg1);

void org_freedesktop_dbus_complete_list_names (
    OrgFreedesktopDBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *unnamed_arg0);

void org_freedesktop_dbus_complete_list_activatable_names (
    OrgFreedesktopDBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *unnamed_arg0);

void org_freedesktop_dbus_complete_add_match (
    OrgFreedesktopDBus *object,
    GDBusMethodInvocation *invocation);

void org_freedesktop_dbus_complete_remove_match (
    OrgFreedesktopDBus *object,
    GDBusMethodInvocation *invocation);

void org_freedesktop_dbus_complete_get_name_owner (
    OrgFreedesktopDBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg1);

void org_freedesktop_dbus_complete_list_queued_owners (
    OrgFreedesktopDBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *unnamed_arg1);

void org_freedesktop_dbus_complete_get_connection_unix_user (
    OrgFreedesktopDBus *object,
    GDBusMethodInvocation *invocation,
    guint unnamed_arg1);

void org_freedesktop_dbus_complete_get_connection_unix_process_id (
    OrgFreedesktopDBus *object,
    GDBusMethodInvocation *invocation,
    guint unnamed_arg1);

void org_freedesktop_dbus_complete_get_adt_audit_session_data (
    OrgFreedesktopDBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg1);

void org_freedesktop_dbus_complete_get_connection_selinux_security_context (
    OrgFreedesktopDBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg1);

void org_freedesktop_dbus_complete_get_connection_app_armor_security_context (
    OrgFreedesktopDBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg1);

void org_freedesktop_dbus_complete_reload_config (
    OrgFreedesktopDBus *object,
    GDBusMethodInvocation *invocation);

void org_freedesktop_dbus_complete_get_id (
    OrgFreedesktopDBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg0);

void org_freedesktop_dbus_complete_get_connection_credentials (
    OrgFreedesktopDBus *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg1);



/* D-Bus signal emissions functions: */
void org_freedesktop_dbus_emit_name_owner_changed (
    OrgFreedesktopDBus *object,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    const gchar *arg_unnamed_arg2);

void org_freedesktop_dbus_emit_name_lost (
    OrgFreedesktopDBus *object,
    const gchar *arg_unnamed_arg0);

void org_freedesktop_dbus_emit_name_acquired (
    OrgFreedesktopDBus *object,
    const gchar *arg_unnamed_arg0);



/* D-Bus method calls: */
void org_freedesktop_dbus_call_hello (
    OrgFreedesktopDBus *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_dbus_call_hello_finish (
    OrgFreedesktopDBus *proxy,
    gchar **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_dbus_call_hello_sync (
    OrgFreedesktopDBus *proxy,
    gchar **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_dbus_call_request_name (
    OrgFreedesktopDBus *proxy,
    const gchar *arg_unnamed_arg0,
    guint arg_unnamed_arg1,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_dbus_call_request_name_finish (
    OrgFreedesktopDBus *proxy,
    guint *out_unnamed_arg2,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_dbus_call_request_name_sync (
    OrgFreedesktopDBus *proxy,
    const gchar *arg_unnamed_arg0,
    guint arg_unnamed_arg1,
    guint *out_unnamed_arg2,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_dbus_call_release_name (
    OrgFreedesktopDBus *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_dbus_call_release_name_finish (
    OrgFreedesktopDBus *proxy,
    guint *out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_dbus_call_release_name_sync (
    OrgFreedesktopDBus *proxy,
    const gchar *arg_unnamed_arg0,
    guint *out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_dbus_call_start_service_by_name (
    OrgFreedesktopDBus *proxy,
    const gchar *arg_unnamed_arg0,
    guint arg_unnamed_arg1,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_dbus_call_start_service_by_name_finish (
    OrgFreedesktopDBus *proxy,
    guint *out_unnamed_arg2,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_dbus_call_start_service_by_name_sync (
    OrgFreedesktopDBus *proxy,
    const gchar *arg_unnamed_arg0,
    guint arg_unnamed_arg1,
    guint *out_unnamed_arg2,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_dbus_call_update_activation_environment (
    OrgFreedesktopDBus *proxy,
    GVariant *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_dbus_call_update_activation_environment_finish (
    OrgFreedesktopDBus *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_dbus_call_update_activation_environment_sync (
    OrgFreedesktopDBus *proxy,
    GVariant *arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_dbus_call_name_has_owner (
    OrgFreedesktopDBus *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_dbus_call_name_has_owner_finish (
    OrgFreedesktopDBus *proxy,
    gboolean *out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_dbus_call_name_has_owner_sync (
    OrgFreedesktopDBus *proxy,
    const gchar *arg_unnamed_arg0,
    gboolean *out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_dbus_call_list_names (
    OrgFreedesktopDBus *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_dbus_call_list_names_finish (
    OrgFreedesktopDBus *proxy,
    gchar ***out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_dbus_call_list_names_sync (
    OrgFreedesktopDBus *proxy,
    gchar ***out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_dbus_call_list_activatable_names (
    OrgFreedesktopDBus *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_dbus_call_list_activatable_names_finish (
    OrgFreedesktopDBus *proxy,
    gchar ***out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_dbus_call_list_activatable_names_sync (
    OrgFreedesktopDBus *proxy,
    gchar ***out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_dbus_call_add_match (
    OrgFreedesktopDBus *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_dbus_call_add_match_finish (
    OrgFreedesktopDBus *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_dbus_call_add_match_sync (
    OrgFreedesktopDBus *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_dbus_call_remove_match (
    OrgFreedesktopDBus *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_dbus_call_remove_match_finish (
    OrgFreedesktopDBus *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_dbus_call_remove_match_sync (
    OrgFreedesktopDBus *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_dbus_call_get_name_owner (
    OrgFreedesktopDBus *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_dbus_call_get_name_owner_finish (
    OrgFreedesktopDBus *proxy,
    gchar **out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_dbus_call_get_name_owner_sync (
    OrgFreedesktopDBus *proxy,
    const gchar *arg_unnamed_arg0,
    gchar **out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_dbus_call_list_queued_owners (
    OrgFreedesktopDBus *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_dbus_call_list_queued_owners_finish (
    OrgFreedesktopDBus *proxy,
    gchar ***out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_dbus_call_list_queued_owners_sync (
    OrgFreedesktopDBus *proxy,
    const gchar *arg_unnamed_arg0,
    gchar ***out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_dbus_call_get_connection_unix_user (
    OrgFreedesktopDBus *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_dbus_call_get_connection_unix_user_finish (
    OrgFreedesktopDBus *proxy,
    guint *out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_dbus_call_get_connection_unix_user_sync (
    OrgFreedesktopDBus *proxy,
    const gchar *arg_unnamed_arg0,
    guint *out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_dbus_call_get_connection_unix_process_id (
    OrgFreedesktopDBus *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_dbus_call_get_connection_unix_process_id_finish (
    OrgFreedesktopDBus *proxy,
    guint *out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_dbus_call_get_connection_unix_process_id_sync (
    OrgFreedesktopDBus *proxy,
    const gchar *arg_unnamed_arg0,
    guint *out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_dbus_call_get_adt_audit_session_data (
    OrgFreedesktopDBus *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_dbus_call_get_adt_audit_session_data_finish (
    OrgFreedesktopDBus *proxy,
    gchar **out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_dbus_call_get_adt_audit_session_data_sync (
    OrgFreedesktopDBus *proxy,
    const gchar *arg_unnamed_arg0,
    gchar **out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_dbus_call_get_connection_selinux_security_context (
    OrgFreedesktopDBus *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_dbus_call_get_connection_selinux_security_context_finish (
    OrgFreedesktopDBus *proxy,
    gchar **out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_dbus_call_get_connection_selinux_security_context_sync (
    OrgFreedesktopDBus *proxy,
    const gchar *arg_unnamed_arg0,
    gchar **out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_dbus_call_get_connection_app_armor_security_context (
    OrgFreedesktopDBus *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_dbus_call_get_connection_app_armor_security_context_finish (
    OrgFreedesktopDBus *proxy,
    gchar **out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_dbus_call_get_connection_app_armor_security_context_sync (
    OrgFreedesktopDBus *proxy,
    const gchar *arg_unnamed_arg0,
    gchar **out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_dbus_call_reload_config (
    OrgFreedesktopDBus *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_dbus_call_reload_config_finish (
    OrgFreedesktopDBus *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_dbus_call_reload_config_sync (
    OrgFreedesktopDBus *proxy,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_dbus_call_get_id (
    OrgFreedesktopDBus *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_dbus_call_get_id_finish (
    OrgFreedesktopDBus *proxy,
    gchar **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_dbus_call_get_id_sync (
    OrgFreedesktopDBus *proxy,
    gchar **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_dbus_call_get_connection_credentials (
    OrgFreedesktopDBus *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_dbus_call_get_connection_credentials_finish (
    OrgFreedesktopDBus *proxy,
    GVariant **out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_dbus_call_get_connection_credentials_sync (
    OrgFreedesktopDBus *proxy,
    const gchar *arg_unnamed_arg0,
    GVariant **out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *const *org_freedesktop_dbus_get_features (OrgFreedesktopDBus *object);
gchar **org_freedesktop_dbus_dup_features (OrgFreedesktopDBus *object);
void org_freedesktop_dbus_set_features (OrgFreedesktopDBus *object, const gchar *const *value);

const gchar *const *org_freedesktop_dbus_get_interfaces (OrgFreedesktopDBus *object);
gchar **org_freedesktop_dbus_dup_interfaces (OrgFreedesktopDBus *object);
void org_freedesktop_dbus_set_interfaces (OrgFreedesktopDBus *object, const gchar *const *value);


/* ---- */

#define TYPE_ORG_FREEDESKTOP_DBUS_PROXY (org_freedesktop_dbus_proxy_get_type ())
#define ORG_FREEDESKTOP_DBUS_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_DBUS_PROXY, OrgFreedesktopDBusProxy))
#define ORG_FREEDESKTOP_DBUS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_FREEDESKTOP_DBUS_PROXY, OrgFreedesktopDBusProxyClass))
#define ORG_FREEDESKTOP_DBUS_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_FREEDESKTOP_DBUS_PROXY, OrgFreedesktopDBusProxyClass))
#define IS_ORG_FREEDESKTOP_DBUS_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_DBUS_PROXY))
#define IS_ORG_FREEDESKTOP_DBUS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_FREEDESKTOP_DBUS_PROXY))

typedef struct _OrgFreedesktopDBusProxy OrgFreedesktopDBusProxy;
typedef struct _OrgFreedesktopDBusProxyClass OrgFreedesktopDBusProxyClass;
typedef struct _OrgFreedesktopDBusProxyPrivate OrgFreedesktopDBusProxyPrivate;

struct _OrgFreedesktopDBusProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  OrgFreedesktopDBusProxyPrivate *priv;
};

struct _OrgFreedesktopDBusProxyClass
{
  GDBusProxyClass parent_class;
};

GType org_freedesktop_dbus_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgFreedesktopDBusProxy, g_object_unref)
#endif

void org_freedesktop_dbus_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgFreedesktopDBus *org_freedesktop_dbus_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
OrgFreedesktopDBus *org_freedesktop_dbus_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void org_freedesktop_dbus_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgFreedesktopDBus *org_freedesktop_dbus_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
OrgFreedesktopDBus *org_freedesktop_dbus_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_ORG_FREEDESKTOP_DBUS_SKELETON (org_freedesktop_dbus_skeleton_get_type ())
#define ORG_FREEDESKTOP_DBUS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_DBUS_SKELETON, OrgFreedesktopDBusSkeleton))
#define ORG_FREEDESKTOP_DBUS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_FREEDESKTOP_DBUS_SKELETON, OrgFreedesktopDBusSkeletonClass))
#define ORG_FREEDESKTOP_DBUS_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_FREEDESKTOP_DBUS_SKELETON, OrgFreedesktopDBusSkeletonClass))
#define IS_ORG_FREEDESKTOP_DBUS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_DBUS_SKELETON))
#define IS_ORG_FREEDESKTOP_DBUS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_FREEDESKTOP_DBUS_SKELETON))

typedef struct _OrgFreedesktopDBusSkeleton OrgFreedesktopDBusSkeleton;
typedef struct _OrgFreedesktopDBusSkeletonClass OrgFreedesktopDBusSkeletonClass;
typedef struct _OrgFreedesktopDBusSkeletonPrivate OrgFreedesktopDBusSkeletonPrivate;

struct _OrgFreedesktopDBusSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  OrgFreedesktopDBusSkeletonPrivate *priv;
};

struct _OrgFreedesktopDBusSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType org_freedesktop_dbus_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgFreedesktopDBusSkeleton, g_object_unref)
#endif

OrgFreedesktopDBus *org_freedesktop_dbus_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Properties */

#define TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES (org_freedesktop_dbus_properties_get_type ())
#define ORG_FREEDESKTOP_DBUS_PROPERTIES(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES, OrgFreedesktopDBusProperties))
#define IS_ORG_FREEDESKTOP_DBUS_PROPERTIES(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES))
#define ORG_FREEDESKTOP_DBUS_PROPERTIES_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES, OrgFreedesktopDBusPropertiesIface))

struct _OrgFreedesktopDBusProperties;
typedef struct _OrgFreedesktopDBusProperties OrgFreedesktopDBusProperties;
typedef struct _OrgFreedesktopDBusPropertiesIface OrgFreedesktopDBusPropertiesIface;

struct _OrgFreedesktopDBusPropertiesIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_get) (
    OrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1);

  gboolean (*handle_get_all) (
    OrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_set) (
    OrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    GVariant *arg_unnamed_arg2);

  void (*properties_changed) (
    OrgFreedesktopDBusProperties *object,
    const gchar *arg_interface_name,
    GVariant *arg_changed_properties,
    const gchar *const *arg_invalidated_properties);

};

GType org_freedesktop_dbus_properties_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *org_freedesktop_dbus_properties_interface_info (void);
guint org_freedesktop_dbus_properties_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void org_freedesktop_dbus_properties_complete_get (
    OrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg2);

void org_freedesktop_dbus_properties_complete_get_all (
    OrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg1);

void org_freedesktop_dbus_properties_complete_set (
    OrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void org_freedesktop_dbus_properties_emit_properties_changed (
    OrgFreedesktopDBusProperties *object,
    const gchar *arg_interface_name,
    GVariant *arg_changed_properties,
    const gchar *const *arg_invalidated_properties);



/* D-Bus method calls: */
void org_freedesktop_dbus_properties_call_get (
    OrgFreedesktopDBusProperties *proxy,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_dbus_properties_call_get_finish (
    OrgFreedesktopDBusProperties *proxy,
    GVariant **out_unnamed_arg2,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_dbus_properties_call_get_sync (
    OrgFreedesktopDBusProperties *proxy,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    GVariant **out_unnamed_arg2,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_dbus_properties_call_get_all (
    OrgFreedesktopDBusProperties *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_dbus_properties_call_get_all_finish (
    OrgFreedesktopDBusProperties *proxy,
    GVariant **out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_dbus_properties_call_get_all_sync (
    OrgFreedesktopDBusProperties *proxy,
    const gchar *arg_unnamed_arg0,
    GVariant **out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_dbus_properties_call_set (
    OrgFreedesktopDBusProperties *proxy,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    GVariant *arg_unnamed_arg2,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_dbus_properties_call_set_finish (
    OrgFreedesktopDBusProperties *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_dbus_properties_call_set_sync (
    OrgFreedesktopDBusProperties *proxy,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    GVariant *arg_unnamed_arg2,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY (org_freedesktop_dbus_properties_proxy_get_type ())
#define ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, OrgFreedesktopDBusPropertiesProxy))
#define ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, OrgFreedesktopDBusPropertiesProxyClass))
#define ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, OrgFreedesktopDBusPropertiesProxyClass))
#define IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY))
#define IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY))

typedef struct _OrgFreedesktopDBusPropertiesProxy OrgFreedesktopDBusPropertiesProxy;
typedef struct _OrgFreedesktopDBusPropertiesProxyClass OrgFreedesktopDBusPropertiesProxyClass;
typedef struct _OrgFreedesktopDBusPropertiesProxyPrivate OrgFreedesktopDBusPropertiesProxyPrivate;

struct _OrgFreedesktopDBusPropertiesProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  OrgFreedesktopDBusPropertiesProxyPrivate *priv;
};

struct _OrgFreedesktopDBusPropertiesProxyClass
{
  GDBusProxyClass parent_class;
};

GType org_freedesktop_dbus_properties_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgFreedesktopDBusPropertiesProxy, g_object_unref)
#endif

void org_freedesktop_dbus_properties_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgFreedesktopDBusProperties *org_freedesktop_dbus_properties_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
OrgFreedesktopDBusProperties *org_freedesktop_dbus_properties_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void org_freedesktop_dbus_properties_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgFreedesktopDBusProperties *org_freedesktop_dbus_properties_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
OrgFreedesktopDBusProperties *org_freedesktop_dbus_properties_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON (org_freedesktop_dbus_properties_skeleton_get_type ())
#define ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON, OrgFreedesktopDBusPropertiesSkeleton))
#define ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON, OrgFreedesktopDBusPropertiesSkeletonClass))
#define ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON, OrgFreedesktopDBusPropertiesSkeletonClass))
#define IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON))
#define IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON))

typedef struct _OrgFreedesktopDBusPropertiesSkeleton OrgFreedesktopDBusPropertiesSkeleton;
typedef struct _OrgFreedesktopDBusPropertiesSkeletonClass OrgFreedesktopDBusPropertiesSkeletonClass;
typedef struct _OrgFreedesktopDBusPropertiesSkeletonPrivate OrgFreedesktopDBusPropertiesSkeletonPrivate;

struct _OrgFreedesktopDBusPropertiesSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  OrgFreedesktopDBusPropertiesSkeletonPrivate *priv;
};

struct _OrgFreedesktopDBusPropertiesSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType org_freedesktop_dbus_properties_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgFreedesktopDBusPropertiesSkeleton, g_object_unref)
#endif

OrgFreedesktopDBusProperties *org_freedesktop_dbus_properties_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Introspectable */

#define TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE (org_freedesktop_dbus_introspectable_get_type ())
#define ORG_FREEDESKTOP_DBUS_INTROSPECTABLE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE, OrgFreedesktopDBusIntrospectable))
#define IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE))
#define ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE, OrgFreedesktopDBusIntrospectableIface))

struct _OrgFreedesktopDBusIntrospectable;
typedef struct _OrgFreedesktopDBusIntrospectable OrgFreedesktopDBusIntrospectable;
typedef struct _OrgFreedesktopDBusIntrospectableIface OrgFreedesktopDBusIntrospectableIface;

struct _OrgFreedesktopDBusIntrospectableIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_introspect) (
    OrgFreedesktopDBusIntrospectable *object,
    GDBusMethodInvocation *invocation);

};

GType org_freedesktop_dbus_introspectable_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *org_freedesktop_dbus_introspectable_interface_info (void);
guint org_freedesktop_dbus_introspectable_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void org_freedesktop_dbus_introspectable_complete_introspect (
    OrgFreedesktopDBusIntrospectable *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg0);



/* D-Bus method calls: */
void org_freedesktop_dbus_introspectable_call_introspect (
    OrgFreedesktopDBusIntrospectable *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_dbus_introspectable_call_introspect_finish (
    OrgFreedesktopDBusIntrospectable *proxy,
    gchar **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_dbus_introspectable_call_introspect_sync (
    OrgFreedesktopDBusIntrospectable *proxy,
    gchar **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY (org_freedesktop_dbus_introspectable_proxy_get_type ())
#define ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY, OrgFreedesktopDBusIntrospectableProxy))
#define ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY, OrgFreedesktopDBusIntrospectableProxyClass))
#define ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY, OrgFreedesktopDBusIntrospectableProxyClass))
#define IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY))
#define IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY))

typedef struct _OrgFreedesktopDBusIntrospectableProxy OrgFreedesktopDBusIntrospectableProxy;
typedef struct _OrgFreedesktopDBusIntrospectableProxyClass OrgFreedesktopDBusIntrospectableProxyClass;
typedef struct _OrgFreedesktopDBusIntrospectableProxyPrivate OrgFreedesktopDBusIntrospectableProxyPrivate;

struct _OrgFreedesktopDBusIntrospectableProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  OrgFreedesktopDBusIntrospectableProxyPrivate *priv;
};

struct _OrgFreedesktopDBusIntrospectableProxyClass
{
  GDBusProxyClass parent_class;
};

GType org_freedesktop_dbus_introspectable_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgFreedesktopDBusIntrospectableProxy, g_object_unref)
#endif

void org_freedesktop_dbus_introspectable_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgFreedesktopDBusIntrospectable *org_freedesktop_dbus_introspectable_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
OrgFreedesktopDBusIntrospectable *org_freedesktop_dbus_introspectable_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void org_freedesktop_dbus_introspectable_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgFreedesktopDBusIntrospectable *org_freedesktop_dbus_introspectable_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
OrgFreedesktopDBusIntrospectable *org_freedesktop_dbus_introspectable_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON (org_freedesktop_dbus_introspectable_skeleton_get_type ())
#define ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON, OrgFreedesktopDBusIntrospectableSkeleton))
#define ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON, OrgFreedesktopDBusIntrospectableSkeletonClass))
#define ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON, OrgFreedesktopDBusIntrospectableSkeletonClass))
#define IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON))
#define IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON))

typedef struct _OrgFreedesktopDBusIntrospectableSkeleton OrgFreedesktopDBusIntrospectableSkeleton;
typedef struct _OrgFreedesktopDBusIntrospectableSkeletonClass OrgFreedesktopDBusIntrospectableSkeletonClass;
typedef struct _OrgFreedesktopDBusIntrospectableSkeletonPrivate OrgFreedesktopDBusIntrospectableSkeletonPrivate;

struct _OrgFreedesktopDBusIntrospectableSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  OrgFreedesktopDBusIntrospectableSkeletonPrivate *priv;
};

struct _OrgFreedesktopDBusIntrospectableSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType org_freedesktop_dbus_introspectable_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgFreedesktopDBusIntrospectableSkeleton, g_object_unref)
#endif

OrgFreedesktopDBusIntrospectable *org_freedesktop_dbus_introspectable_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Monitoring */

#define TYPE_ORG_FREEDESKTOP_DBUS_MONITORING (org_freedesktop_dbus_monitoring_get_type ())
#define ORG_FREEDESKTOP_DBUS_MONITORING(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_DBUS_MONITORING, OrgFreedesktopDBusMonitoring))
#define IS_ORG_FREEDESKTOP_DBUS_MONITORING(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_DBUS_MONITORING))
#define ORG_FREEDESKTOP_DBUS_MONITORING_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_ORG_FREEDESKTOP_DBUS_MONITORING, OrgFreedesktopDBusMonitoringIface))

struct _OrgFreedesktopDBusMonitoring;
typedef struct _OrgFreedesktopDBusMonitoring OrgFreedesktopDBusMonitoring;
typedef struct _OrgFreedesktopDBusMonitoringIface OrgFreedesktopDBusMonitoringIface;

struct _OrgFreedesktopDBusMonitoringIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_become_monitor) (
    OrgFreedesktopDBusMonitoring *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_unnamed_arg0,
    guint arg_unnamed_arg1);

};

GType org_freedesktop_dbus_monitoring_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *org_freedesktop_dbus_monitoring_interface_info (void);
guint org_freedesktop_dbus_monitoring_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void org_freedesktop_dbus_monitoring_complete_become_monitor (
    OrgFreedesktopDBusMonitoring *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void org_freedesktop_dbus_monitoring_call_become_monitor (
    OrgFreedesktopDBusMonitoring *proxy,
    const gchar *const *arg_unnamed_arg0,
    guint arg_unnamed_arg1,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_dbus_monitoring_call_become_monitor_finish (
    OrgFreedesktopDBusMonitoring *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_dbus_monitoring_call_become_monitor_sync (
    OrgFreedesktopDBusMonitoring *proxy,
    const gchar *const *arg_unnamed_arg0,
    guint arg_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_ORG_FREEDESKTOP_DBUS_MONITORING_PROXY (org_freedesktop_dbus_monitoring_proxy_get_type ())
#define ORG_FREEDESKTOP_DBUS_MONITORING_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_DBUS_MONITORING_PROXY, OrgFreedesktopDBusMonitoringProxy))
#define ORG_FREEDESKTOP_DBUS_MONITORING_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_FREEDESKTOP_DBUS_MONITORING_PROXY, OrgFreedesktopDBusMonitoringProxyClass))
#define ORG_FREEDESKTOP_DBUS_MONITORING_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_FREEDESKTOP_DBUS_MONITORING_PROXY, OrgFreedesktopDBusMonitoringProxyClass))
#define IS_ORG_FREEDESKTOP_DBUS_MONITORING_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_DBUS_MONITORING_PROXY))
#define IS_ORG_FREEDESKTOP_DBUS_MONITORING_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_FREEDESKTOP_DBUS_MONITORING_PROXY))

typedef struct _OrgFreedesktopDBusMonitoringProxy OrgFreedesktopDBusMonitoringProxy;
typedef struct _OrgFreedesktopDBusMonitoringProxyClass OrgFreedesktopDBusMonitoringProxyClass;
typedef struct _OrgFreedesktopDBusMonitoringProxyPrivate OrgFreedesktopDBusMonitoringProxyPrivate;

struct _OrgFreedesktopDBusMonitoringProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  OrgFreedesktopDBusMonitoringProxyPrivate *priv;
};

struct _OrgFreedesktopDBusMonitoringProxyClass
{
  GDBusProxyClass parent_class;
};

GType org_freedesktop_dbus_monitoring_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgFreedesktopDBusMonitoringProxy, g_object_unref)
#endif

void org_freedesktop_dbus_monitoring_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgFreedesktopDBusMonitoring *org_freedesktop_dbus_monitoring_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
OrgFreedesktopDBusMonitoring *org_freedesktop_dbus_monitoring_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void org_freedesktop_dbus_monitoring_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgFreedesktopDBusMonitoring *org_freedesktop_dbus_monitoring_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
OrgFreedesktopDBusMonitoring *org_freedesktop_dbus_monitoring_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_ORG_FREEDESKTOP_DBUS_MONITORING_SKELETON (org_freedesktop_dbus_monitoring_skeleton_get_type ())
#define ORG_FREEDESKTOP_DBUS_MONITORING_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_DBUS_MONITORING_SKELETON, OrgFreedesktopDBusMonitoringSkeleton))
#define ORG_FREEDESKTOP_DBUS_MONITORING_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_FREEDESKTOP_DBUS_MONITORING_SKELETON, OrgFreedesktopDBusMonitoringSkeletonClass))
#define ORG_FREEDESKTOP_DBUS_MONITORING_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_FREEDESKTOP_DBUS_MONITORING_SKELETON, OrgFreedesktopDBusMonitoringSkeletonClass))
#define IS_ORG_FREEDESKTOP_DBUS_MONITORING_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_DBUS_MONITORING_SKELETON))
#define IS_ORG_FREEDESKTOP_DBUS_MONITORING_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_FREEDESKTOP_DBUS_MONITORING_SKELETON))

typedef struct _OrgFreedesktopDBusMonitoringSkeleton OrgFreedesktopDBusMonitoringSkeleton;
typedef struct _OrgFreedesktopDBusMonitoringSkeletonClass OrgFreedesktopDBusMonitoringSkeletonClass;
typedef struct _OrgFreedesktopDBusMonitoringSkeletonPrivate OrgFreedesktopDBusMonitoringSkeletonPrivate;

struct _OrgFreedesktopDBusMonitoringSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  OrgFreedesktopDBusMonitoringSkeletonPrivate *priv;
};

struct _OrgFreedesktopDBusMonitoringSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType org_freedesktop_dbus_monitoring_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgFreedesktopDBusMonitoringSkeleton, g_object_unref)
#endif

OrgFreedesktopDBusMonitoring *org_freedesktop_dbus_monitoring_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Debug.Stats */

#define TYPE_ORG_FREEDESKTOP_DBUS_DEBUG_STATS (org_freedesktop_dbus_debug_stats_get_type ())
#define ORG_FREEDESKTOP_DBUS_DEBUG_STATS(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_DBUS_DEBUG_STATS, OrgFreedesktopDBusDebugStats))
#define IS_ORG_FREEDESKTOP_DBUS_DEBUG_STATS(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_DBUS_DEBUG_STATS))
#define ORG_FREEDESKTOP_DBUS_DEBUG_STATS_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_ORG_FREEDESKTOP_DBUS_DEBUG_STATS, OrgFreedesktopDBusDebugStatsIface))

struct _OrgFreedesktopDBusDebugStats;
typedef struct _OrgFreedesktopDBusDebugStats OrgFreedesktopDBusDebugStats;
typedef struct _OrgFreedesktopDBusDebugStatsIface OrgFreedesktopDBusDebugStatsIface;

struct _OrgFreedesktopDBusDebugStatsIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_get_all_match_rules) (
    OrgFreedesktopDBusDebugStats *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_connection_stats) (
    OrgFreedesktopDBusDebugStats *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_get_stats) (
    OrgFreedesktopDBusDebugStats *object,
    GDBusMethodInvocation *invocation);

};

GType org_freedesktop_dbus_debug_stats_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *org_freedesktop_dbus_debug_stats_interface_info (void);
guint org_freedesktop_dbus_debug_stats_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void org_freedesktop_dbus_debug_stats_complete_get_stats (
    OrgFreedesktopDBusDebugStats *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg0);

void org_freedesktop_dbus_debug_stats_complete_get_connection_stats (
    OrgFreedesktopDBusDebugStats *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg1);

void org_freedesktop_dbus_debug_stats_complete_get_all_match_rules (
    OrgFreedesktopDBusDebugStats *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg0);



/* D-Bus method calls: */
void org_freedesktop_dbus_debug_stats_call_get_stats (
    OrgFreedesktopDBusDebugStats *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_dbus_debug_stats_call_get_stats_finish (
    OrgFreedesktopDBusDebugStats *proxy,
    GVariant **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_dbus_debug_stats_call_get_stats_sync (
    OrgFreedesktopDBusDebugStats *proxy,
    GVariant **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_dbus_debug_stats_call_get_connection_stats (
    OrgFreedesktopDBusDebugStats *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_dbus_debug_stats_call_get_connection_stats_finish (
    OrgFreedesktopDBusDebugStats *proxy,
    GVariant **out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_dbus_debug_stats_call_get_connection_stats_sync (
    OrgFreedesktopDBusDebugStats *proxy,
    const gchar *arg_unnamed_arg0,
    GVariant **out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_dbus_debug_stats_call_get_all_match_rules (
    OrgFreedesktopDBusDebugStats *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_dbus_debug_stats_call_get_all_match_rules_finish (
    OrgFreedesktopDBusDebugStats *proxy,
    GVariant **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_dbus_debug_stats_call_get_all_match_rules_sync (
    OrgFreedesktopDBusDebugStats *proxy,
    GVariant **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_ORG_FREEDESKTOP_DBUS_DEBUG_STATS_PROXY (org_freedesktop_dbus_debug_stats_proxy_get_type ())
#define ORG_FREEDESKTOP_DBUS_DEBUG_STATS_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_DBUS_DEBUG_STATS_PROXY, OrgFreedesktopDBusDebugStatsProxy))
#define ORG_FREEDESKTOP_DBUS_DEBUG_STATS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_FREEDESKTOP_DBUS_DEBUG_STATS_PROXY, OrgFreedesktopDBusDebugStatsProxyClass))
#define ORG_FREEDESKTOP_DBUS_DEBUG_STATS_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_FREEDESKTOP_DBUS_DEBUG_STATS_PROXY, OrgFreedesktopDBusDebugStatsProxyClass))
#define IS_ORG_FREEDESKTOP_DBUS_DEBUG_STATS_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_DBUS_DEBUG_STATS_PROXY))
#define IS_ORG_FREEDESKTOP_DBUS_DEBUG_STATS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_FREEDESKTOP_DBUS_DEBUG_STATS_PROXY))

typedef struct _OrgFreedesktopDBusDebugStatsProxy OrgFreedesktopDBusDebugStatsProxy;
typedef struct _OrgFreedesktopDBusDebugStatsProxyClass OrgFreedesktopDBusDebugStatsProxyClass;
typedef struct _OrgFreedesktopDBusDebugStatsProxyPrivate OrgFreedesktopDBusDebugStatsProxyPrivate;

struct _OrgFreedesktopDBusDebugStatsProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  OrgFreedesktopDBusDebugStatsProxyPrivate *priv;
};

struct _OrgFreedesktopDBusDebugStatsProxyClass
{
  GDBusProxyClass parent_class;
};

GType org_freedesktop_dbus_debug_stats_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgFreedesktopDBusDebugStatsProxy, g_object_unref)
#endif

void org_freedesktop_dbus_debug_stats_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgFreedesktopDBusDebugStats *org_freedesktop_dbus_debug_stats_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
OrgFreedesktopDBusDebugStats *org_freedesktop_dbus_debug_stats_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void org_freedesktop_dbus_debug_stats_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgFreedesktopDBusDebugStats *org_freedesktop_dbus_debug_stats_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
OrgFreedesktopDBusDebugStats *org_freedesktop_dbus_debug_stats_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_ORG_FREEDESKTOP_DBUS_DEBUG_STATS_SKELETON (org_freedesktop_dbus_debug_stats_skeleton_get_type ())
#define ORG_FREEDESKTOP_DBUS_DEBUG_STATS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_DBUS_DEBUG_STATS_SKELETON, OrgFreedesktopDBusDebugStatsSkeleton))
#define ORG_FREEDESKTOP_DBUS_DEBUG_STATS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_FREEDESKTOP_DBUS_DEBUG_STATS_SKELETON, OrgFreedesktopDBusDebugStatsSkeletonClass))
#define ORG_FREEDESKTOP_DBUS_DEBUG_STATS_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_FREEDESKTOP_DBUS_DEBUG_STATS_SKELETON, OrgFreedesktopDBusDebugStatsSkeletonClass))
#define IS_ORG_FREEDESKTOP_DBUS_DEBUG_STATS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_DBUS_DEBUG_STATS_SKELETON))
#define IS_ORG_FREEDESKTOP_DBUS_DEBUG_STATS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_FREEDESKTOP_DBUS_DEBUG_STATS_SKELETON))

typedef struct _OrgFreedesktopDBusDebugStatsSkeleton OrgFreedesktopDBusDebugStatsSkeleton;
typedef struct _OrgFreedesktopDBusDebugStatsSkeletonClass OrgFreedesktopDBusDebugStatsSkeletonClass;
typedef struct _OrgFreedesktopDBusDebugStatsSkeletonPrivate OrgFreedesktopDBusDebugStatsSkeletonPrivate;

struct _OrgFreedesktopDBusDebugStatsSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  OrgFreedesktopDBusDebugStatsSkeletonPrivate *priv;
};

struct _OrgFreedesktopDBusDebugStatsSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType org_freedesktop_dbus_debug_stats_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgFreedesktopDBusDebugStatsSkeleton, g_object_unref)
#endif

OrgFreedesktopDBusDebugStats *org_freedesktop_dbus_debug_stats_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Peer */

#define TYPE_ORG_FREEDESKTOP_DBUS_PEER (org_freedesktop_dbus_peer_get_type ())
#define ORG_FREEDESKTOP_DBUS_PEER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_DBUS_PEER, OrgFreedesktopDBusPeer))
#define IS_ORG_FREEDESKTOP_DBUS_PEER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_DBUS_PEER))
#define ORG_FREEDESKTOP_DBUS_PEER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_ORG_FREEDESKTOP_DBUS_PEER, OrgFreedesktopDBusPeerIface))

struct _OrgFreedesktopDBusPeer;
typedef struct _OrgFreedesktopDBusPeer OrgFreedesktopDBusPeer;
typedef struct _OrgFreedesktopDBusPeerIface OrgFreedesktopDBusPeerIface;

struct _OrgFreedesktopDBusPeerIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_get_machine_id) (
    OrgFreedesktopDBusPeer *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_ping) (
    OrgFreedesktopDBusPeer *object,
    GDBusMethodInvocation *invocation);

};

GType org_freedesktop_dbus_peer_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *org_freedesktop_dbus_peer_interface_info (void);
guint org_freedesktop_dbus_peer_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void org_freedesktop_dbus_peer_complete_get_machine_id (
    OrgFreedesktopDBusPeer *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg0);

void org_freedesktop_dbus_peer_complete_ping (
    OrgFreedesktopDBusPeer *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void org_freedesktop_dbus_peer_call_get_machine_id (
    OrgFreedesktopDBusPeer *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_dbus_peer_call_get_machine_id_finish (
    OrgFreedesktopDBusPeer *proxy,
    gchar **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_dbus_peer_call_get_machine_id_sync (
    OrgFreedesktopDBusPeer *proxy,
    gchar **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_dbus_peer_call_ping (
    OrgFreedesktopDBusPeer *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_dbus_peer_call_ping_finish (
    OrgFreedesktopDBusPeer *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_dbus_peer_call_ping_sync (
    OrgFreedesktopDBusPeer *proxy,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_ORG_FREEDESKTOP_DBUS_PEER_PROXY (org_freedesktop_dbus_peer_proxy_get_type ())
#define ORG_FREEDESKTOP_DBUS_PEER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_DBUS_PEER_PROXY, OrgFreedesktopDBusPeerProxy))
#define ORG_FREEDESKTOP_DBUS_PEER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_FREEDESKTOP_DBUS_PEER_PROXY, OrgFreedesktopDBusPeerProxyClass))
#define ORG_FREEDESKTOP_DBUS_PEER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_FREEDESKTOP_DBUS_PEER_PROXY, OrgFreedesktopDBusPeerProxyClass))
#define IS_ORG_FREEDESKTOP_DBUS_PEER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_DBUS_PEER_PROXY))
#define IS_ORG_FREEDESKTOP_DBUS_PEER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_FREEDESKTOP_DBUS_PEER_PROXY))

typedef struct _OrgFreedesktopDBusPeerProxy OrgFreedesktopDBusPeerProxy;
typedef struct _OrgFreedesktopDBusPeerProxyClass OrgFreedesktopDBusPeerProxyClass;
typedef struct _OrgFreedesktopDBusPeerProxyPrivate OrgFreedesktopDBusPeerProxyPrivate;

struct _OrgFreedesktopDBusPeerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  OrgFreedesktopDBusPeerProxyPrivate *priv;
};

struct _OrgFreedesktopDBusPeerProxyClass
{
  GDBusProxyClass parent_class;
};

GType org_freedesktop_dbus_peer_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgFreedesktopDBusPeerProxy, g_object_unref)
#endif

void org_freedesktop_dbus_peer_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgFreedesktopDBusPeer *org_freedesktop_dbus_peer_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
OrgFreedesktopDBusPeer *org_freedesktop_dbus_peer_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void org_freedesktop_dbus_peer_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgFreedesktopDBusPeer *org_freedesktop_dbus_peer_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
OrgFreedesktopDBusPeer *org_freedesktop_dbus_peer_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_ORG_FREEDESKTOP_DBUS_PEER_SKELETON (org_freedesktop_dbus_peer_skeleton_get_type ())
#define ORG_FREEDESKTOP_DBUS_PEER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_DBUS_PEER_SKELETON, OrgFreedesktopDBusPeerSkeleton))
#define ORG_FREEDESKTOP_DBUS_PEER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_FREEDESKTOP_DBUS_PEER_SKELETON, OrgFreedesktopDBusPeerSkeletonClass))
#define ORG_FREEDESKTOP_DBUS_PEER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_FREEDESKTOP_DBUS_PEER_SKELETON, OrgFreedesktopDBusPeerSkeletonClass))
#define IS_ORG_FREEDESKTOP_DBUS_PEER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_DBUS_PEER_SKELETON))
#define IS_ORG_FREEDESKTOP_DBUS_PEER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_FREEDESKTOP_DBUS_PEER_SKELETON))

typedef struct _OrgFreedesktopDBusPeerSkeleton OrgFreedesktopDBusPeerSkeleton;
typedef struct _OrgFreedesktopDBusPeerSkeletonClass OrgFreedesktopDBusPeerSkeletonClass;
typedef struct _OrgFreedesktopDBusPeerSkeletonPrivate OrgFreedesktopDBusPeerSkeletonPrivate;

struct _OrgFreedesktopDBusPeerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  OrgFreedesktopDBusPeerSkeletonPrivate *priv;
};

struct _OrgFreedesktopDBusPeerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType org_freedesktop_dbus_peer_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgFreedesktopDBusPeerSkeleton, g_object_unref)
#endif

OrgFreedesktopDBusPeer *org_freedesktop_dbus_peer_skeleton_new (void);


G_END_DECLS

#endif /* __GENERATED_DBUS_H__ */
